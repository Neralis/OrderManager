from django.core.files.storage import default_storage
from django.db import models
from django.db.models import Sum
from django.shortcuts import get_object_or_404
from ninja import Schema, Router, UploadedFile
from productApp.models import Product, Stock, ProductImage
from typing import List, Optional
from productApp.schemas import ProductIn, ProductOut, ProductImageOut, ProductImageIn
from warehouseApp.models import Warehouse

# –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º
product_router = Router(tags=['–¢–æ–≤–∞—Ä—ã'])

@product_router.get('/product_list_get', response=List[ProductOut])
def get_products(request):
    products = Product.objects.select_related("warehouse").all()

    result = []
    for p in products:
        result.append({
            "id": p.id,
            "name": p.name,
            "product_type": p.product_type,
            "product_description": p.product_description,
            "price": p.price,
            "warehouse": p.warehouse.id
        })
    return result

@product_router.post('/product_create', response=ProductOut)
def create_product(request, data: ProductIn):
    warehouse = get_object_or_404(Warehouse, id=data.warehouse)

    product = Product.objects.create(
        name=data.name,
        product_type=data.product_type,
        price=data.price,
        warehouse=warehouse,  # –±–µ–∑ —Å–∫–æ–±–æ–∫!
        product_description=data.product_description,
    )
    return {
        "id": product.id,
        "name": product.name,
        "product_type": product.product_type,
        "product_description": product.product_description,
        "price": product.price,
        "warehouse": warehouse.id  # üëà –≤–µ—Ä–Ω—ë–º —Ç–æ–ª—å–∫–æ id
    }

@product_router.delete("/product_delete")
def delete_product(request, product_id: int):
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = Product.objects.get(id=product_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        total_quantity = Stock.objects.filter(product=product).aggregate(total=models.Sum('quantity'))["total"] or 0

        if total_quantity > 0:
            return {
                "status": "error",
                "message": f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product.name}', –ø–æ–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –æ—Å—Ç–∞—ë—Ç—Å—è {total_quantity} —à—Ç. –†–∞—Å—Ö–æ–¥—É–π –≤–µ—Å—å —Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º."
            }

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        Stock.objects.filter(product=product).delete()

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
        product.delete()

        return {"status": "success", "message": f"–¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}

    except Product.DoesNotExist:
        return {"status": "error", "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Exception as e:
        return {"status": "error", "message": str(e)}


@product_router.get('/product_stock')
def get_product_stock(request, product_id: int, warehouse_id: Optional[int] = None):
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç
    product = Product.objects.get(id=product_id)

    if warehouse_id is not None:
        # –ï—Å–ª–∏ —Å–∫–ª–∞–¥ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ
        warehouse = Warehouse.objects.get(id=warehouse_id)
        stock = Stock.objects.filter(product=product, warehouse=warehouse).first()

        if stock:
            return {"product": product.name, "warehouse": warehouse.name, "quantity": stock.quantity}
        else:
            return {"detail": "–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."}
    else:
        # –ï—Å–ª–∏ —Å–∫–ª–∞–¥ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º
        total_quantity = Stock.objects.filter(product=product).aggregate(total=Sum('quantity'))["total"] or 0
        return {
            "product": product.name,
            "total_quantity_all_warehouses": total_quantity
        }


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥


@product_router.post("/products/product_stock_add")
def add_product_stock(request, product_id: int, warehouse_id: int, quantity: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ —Å–∫–ª–∞–¥
        product = Product.objects.get(id=product_id)
        warehouse = Warehouse.objects.get(id=warehouse_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ
        stock, created = Stock.objects.get_or_create(product=product, warehouse=warehouse)

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if created:
            stock.quantity = quantity
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stock.quantity += quantity

        stock.save()
        return {"status": "success", "stock_quantity": stock.quantity}
    except Product.DoesNotExist:
        return {"status": "error", "message": "Product not found"}
    except Warehouse.DoesNotExist:
        return {"status": "error", "message": "Warehouse not found"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@product_router.post("/products/product_stock_decrease")
def remove_product_stock(request, product_id: int, warehouse_id: int, quantity: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ —Å–∫–ª–∞–¥
        product = Product.objects.get(id=product_id)
        warehouse = Warehouse.objects.get(id=warehouse_id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        stock = Stock.objects.filter(product=product, warehouse=warehouse).first()

        if not stock:
            return {"status": "error", "message": "–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if stock.quantity < quantity:
            return {
                "status": "error",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {stock.quantity}"
            }

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        stock.quantity -= quantity
        stock.save()

        return {"status": "success", "stock_quantity": stock.quantity}

    except Product.DoesNotExist:
        return {"status": "error", "message": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Warehouse.DoesNotExist:
        return {"status": "error", "message": "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@product_router.post("/products/product_stock_transfer")
def transfer_product_stock(
    request,
    product_id: int,
    from_warehouse_id: int,
    to_warehouse_id: int,
    quantity: int
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ —Å–∫–ª–∞–¥—ã
        product = Product.objects.get(id=product_id)
        from_warehouse = Warehouse.objects.get(id=from_warehouse_id)
        to_warehouse = Warehouse.objects.get(id=to_warehouse_id)

        if from_warehouse_id == to_warehouse_id:
            return {"status": "error", "message": "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∫–ª–∞–¥"}

        # –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ
        from_stock = Stock.objects.filter(product=product, warehouse=from_warehouse).first()
        if not from_stock or from_stock.quantity < quantity:
            return {
                "status": "error",
                "message": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {from_stock.quantity if from_stock else 0}"
            }

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        to_stock, _ = Stock.objects.get_or_create(product=product, warehouse=to_warehouse)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å
        from_stock.quantity -= quantity
        to_stock.quantity += quantity

        from_stock.save()
        to_stock.save()

        return {
            "status": "success",
            "message": f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {quantity} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞",
            "from_warehouse_stock": from_stock.quantity,
            "to_warehouse_stock": to_stock.quantity
        }

    except Product.DoesNotExist:
        return {"status": "error", "message": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Warehouse.DoesNotExist:
        return {"status": "error", "message": "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@product_router.post('/product/upload_image', response={200: ProductImageOut, 404: dict})
def upload_product_image(request, data: ProductImageIn, file: UploadedFile):
    try:
        product = Product.objects.get(id=data.product_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = default_storage.save(f"product_images/{file.name}", file)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ProductImage
        image = ProductImage.objects.create(
            product=product,
            image=file_path,
            alt_text=data.alt_text or ""
        )

        return {
            "id": image.id,
            "product": product.id,
            "image_url": request.build_absolute_uri(image.image.url),
            "alt_text": image.alt_text,
            "uploaded_at": image.uploaded_at.isoformat()
        }

    except Product.DoesNotExist:
        return 404, {"message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}

@product_router.get('/product/images', response=List[ProductImageOut])
def get_product_images(request, product_id: int):
    images = ProductImage.objects.filter(product_id=product_id)
    return [
        {
            "id": img.id,
            "product": img.product.id,
            "image_url": request.build_absolute_uri(img.image.url),
            "alt_text": img.alt_text,
            "uploaded_at": img.uploaded_at.isoformat()
        }
        for img in images
    ]